--- in join i will always try to find out the column which are common in the both table

create table employee(
	emp_id varchar,
	emp_name varchar,
	salary int ,
	dept_id varchar,
	manager_id varchar
);

insert into employee (emp_id,emp_name,salary,dept_id,manager_id)

values

('E1','Rahul',15000,'D1','M1'),
('E2','Manoj',15000,'D1','M1'),
('E3','James',55000,'D2','M2'),
('E4','Michael',25000,'D2','M2'),
('E5','Ali',20000,'D10','M3'),
('E6','Robin',35000,'D10','M3');

create table department(
	dept_id varchar,
	dept_name varchar
);

insert into department(dept_id,dept_name)

values 
('D1','IT'),
('D2','HR'),
('D3','Finance'),
('D4','Admin');

create table manager(
	
	manager_id varchar,
	manager_name varchar,
	dept_id varchar

);

insert into manager(manager_id,manager_name,dept_id)
values
('M1','Prem','D3'),
('M2','Shripadh','D4'),
('M3','Nick','D1'),
('M4','Cory','D1');

create table projects(
	project_id varchar,
	project_name varchar,
	temp_member_id varchar

);
ALTER table projects 
rename  temp_member_id to team_member_id;

insert into projects(project_id,project_name,team_member_id)
values
('P1','Data Migration','E1'),
('P1','Data Migration','E2'),
('P1','Data Migration','M3'),
('P2','ETL Tool','E1'),
('P2','ETL Tool','M4');

select* from projects;

--fetch the employee name and the department name they belong to.
-- inner join/ join are same
--- inner join will try to fetch the those records which are present in the both records

select e.emp_name,d.dept_name  (this is on which column i want to join)
from employee e 
inner join 
department d 
on e.dept_id = d.dept_id;(this part is basically the condition on which i want ot join two tables)

--- left join
-----fetch all the employee name and their department name they belong to.
--- in left join the left side table will give the priority and it will become the main table
-- left join=inner join + any additional records in the left table

select e.emp_name,d.dept_name  
from employee e 
left join 
department d 
on e.dept_id = d.dept_id;

--- same as the left join just the right table will be given the priority
-- right join =inner join + any additioinal records in the right table

select e.emp_name,d.dept_name  
from employee e 
right join 
department d 
on e.dept_id = d.dept_id;


----fetch details of all emp their manager their department and the project they work on

select e.emp_name,d.dept_name , m.manager_name,p.project_name
from employee e 
left join 
department d 
on e.dept_id = d.dept_id
inner join manager m on m.manager_id = e.manager_id
join projects p on p.team_member_id = e. emp_id;



--full join/full outer join= inner join + all remaining records from the left table(return null value for any column fetch from the left)
--- + all remainng recordss from right table (returns null value for any column fetch from the right)
 select e.emp_name,d.dept_name
 from employee e
 full join department d on d.dept_id=e.dept_id;

--cross join
-- cross join returns cartesian product.
---every record from the left hand table will match with every record from the right side table
---cross does not need the conditon it just need the two table

 select  e.emp_name,d.dept_name
 from employee e
 cross join department d;
 
 --- ther are 6 record in the employee and 4 record in the department so there are 6*4 record total
 
 create table company(
	 company_id varchar,
	 company_name varchar,
	 location varchar
 
 );
 
 insert into company(company_id,company_name,location)
 values
 ('C001','techTFQ Solutions','Kuala Lumpur');
 
 select* from company;
 
 --write a query to fetch the employee name and their corresponding  department name
 --Also make sure to display the company name and the company location corrresponding to each employee
 --- when  i have a table which can not be join to any other table but you need information from that table then using a cross join can be a useful tool there 
	
	select e.emp_name,dept_name,c.company_name,c.location
	from employee e
	inner join department d on e.dept_id = d.dept_id
	cross join company c;
	
	--- in the above query from to before the cross join will be act as left table
	-- after that the result of that will be used with cross join table
	
	--- natural join 
	--in natural join there is no condition for join
	-- we have no option for choosing the column rather sql will decide on which condition the joining wil be happen
	 --- it looks like the inner join
	 -- but there are some different
	 
	 select e.emp_name,d.dept_name
	 from employee e
	 natural join department d;
	 
	 --sql the sql will automatically will find whether there are same column in the two table
	 --and it will fetch these table
	 ---but if it not find the same name column it will give the cross join result
	 --- if the columan have same name it will do a inner join
 alter table department rename column dept_id to id;
 
 
 --- self join is most important
 -- when you join a tble to itself
 
 create table family(
	 member_id varchar,
	 name varchar,
	 age int ,
	 parent_id varchar
 );
 insert into family(member_id,name,age,parent_id)
 values
 ('F1','David',4,'F5'),
 ('F2','Carol',10,'F5'),
 ('F3','Michal',12,'F5'),
 ('F4','Johnson',36,''),
 ('F5','Maryam',40,'F6'),
 ('F6','Stewart',70,''),
 ('F7','Rohan',6,'F4'),
 ('F8','Asa',8,'F4');
 
 select* from family;
 
  
 ---- when i need to fetch the record with the some record in the same table then i need to write the self join
 --- write a query to fetch the child name and their age corresponding to their parent name and parent name
 
--- here i used the same table twiece
-- in that case i need to proper aliase in that case 
--- there is no keyword as self join i used just the join condition in that case
select  child.name as child_name,
child.age as child_age,
parent.name as parent_name,
parent.age as parent_age

from family as child 
join
family as parent
on child.parent_id = parent.member_id;



-----union and union all


---- union in sql
--- union is used to combine or concatenate the results of two or more select statementntss w
--- without returning any duplicate rows and keeps unique records

--- to do union we need to maintain
--1.the same number of columns selected and expression
--2. the same data type and 
---3. have them in the same order

--- union all is same as union but there the duplicate value is allowed

create table cusA(
	cust_name varchar,
	cust_amount int
);

insert into cusA(cust_name,cust_amount)
values
('Madan Mohan',2100),
('Gopi Nath','1200'),
('Govind Dev',5000);

create table cusB(
	cust_name varchar,
	cust_amount int
);

select* from cusA;

insert into cusB(cust_name,cust_amount)
values
('Gopal Bhat',1500),
('Madan Mohan','2100');

select* from cusB;


select cust_name,cust_amount
from cusA
union all
select cust_name,cust_amount
from cusB;


select cust_name,cust_amount
from cusA
union 
select cust_name,cust_amount
from cusB;










