create table employee
( emp_ID int
, emp_NAME varchar(50)
, DEPT_NAME varchar(50)
, SALARY int);


insert into employee values(101, 'Mohan', 'Admin', 4000);
insert into employee values(102, 'Rajkumar', 'HR', 3000);
insert into employee values(103, 'Akbar', 'IT', 4000);
insert into employee values(104, 'Dorvin', 'Finance', 6500);
insert into employee values(105, 'Rohit', 'HR', 3000);
insert into employee values(106, 'Rajesh',  'Finance', 5000);
insert into employee values(107, 'Preet', 'HR', 7000);
insert into employee values(108, 'Maryam', 'Admin', 4000);
insert into employee values(109, 'Sanjay', 'IT', 6500);
insert into employee values(110, 'Vasudha', 'IT', 7000);
insert into employee values(111, 'Melinda', 'IT', 8000);
insert into employee values(112, 'Komal', 'IT', 10000);
insert into employee values(113, 'Gautham', 'Admin', 2000);
insert into employee values(114, 'Manisha', 'HR', 3000);
insert into employee values(115, 'Chandni', 'IT', 4500);
insert into employee values(116, 'Satya', 'Finance', 6500);
insert into employee values(117, 'Adarsh', 'HR', 3500);
insert into employee values(118, 'Tejaswi', 'Finance', 5500);
insert into employee values(119, 'Cory', 'HR', 8000);
insert into employee values(120, 'Monica', 'Admin', 5000);
insert into employee values(121, 'Rosalin', 'IT', 6000);
insert into employee values(122, 'Ibrahim', 'IT', 8000);
insert into employee values(123, 'Vikram', 'IT', 8000);
insert into employee values(124, 'Dheeraj', 'IT', 11000);

select* from employee;
---- this is for max salary for all group by group fucntion
select* max(salary) as max_salary
from employee
gropu by dept_name;

--- this is by window function 
 select e.*,
 max(salary) over(partition by dept_name) as max_salary
 from employee e;
 
 
 select e.*,
 row_number() over(partition by dept_name) as rn
 from employee e;
 
 
 ---fetch the first 2 employees from each department to join the company
 

select* from(
	select e.*,
	row_number() over(partition by dept_name order by emp_id) as rn
	from employee e) x
	
	where x.rn<3;
	
	--- fetch the first 3 employee in each department earning  the max salary
	--- if the rank function find the same value or rank then it give their rank same
	---- but the next integer value will be  skipped
	
	
select* from(

select e.*,
	rank () over(partition by dept_name order by salary desc) as rnk
	from  employee e)x
where x.rnk < 4;

---- in case of dense rank the same value is found the next integer is not skipped

select e.*,
rank () over(partition by dept_name order by salary desc ) as rank,
dense_rank () over(partition by dept_name order by salary desc ) as DENSE_rnk
from employee e;

--- differnce betwen the rank,dense rank,row_number
select e.*,
rank () over(partition by dept_name order by salary desc ) as rank,
dense_rank () over(partition by dept_name order by salary desc ) as DENSE_rnk,
row_number () over(partition by dept_name order by salary desc ) as rn
from employee e;


---fetch a query to display if the salary of an employee is higher or lower or equal to the previous employee
---- lag(salary,2,0) second parametes is how many prev i  want know ,third is for the first value

 select e.*,
 lag(salary) over(partition by dept_name order by emp_id) as prev_emp_salary,
 lead(salary) over(partition by dept_name order by emp_id) as next_emp_salary
 from employee e;
 
 select e.*,
 lag(salary) over(partition by dept_name order by emp_id) as prev_emp_salary,
 case when e.salary > lag(salary) over(partition by dept_name order by emp_id) then 'Higher than previous employee'
 	  when e.salary <  lag(salary) over(partition by dept_name order by emp_id) then 'Lower than previous employee'

		when e.salary =  lag(salary) over(partition by dept_name order by emp_id) then 'Equal to  previous employee' 
	end sal_range
	
from employee e;
